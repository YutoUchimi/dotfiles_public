#!/usr/bin/env python

from __future__ import print_function

import os
import os.path as osp
import sys
import warnings
warnings.filterwarnings('ignore')  # NOQA

try:
    from concurrent.futures import ProcessPoolExecutor
except ImportError:
    print('Please run: pip install futures')
    sys.exit(1)
import paramiko
import six
import yaml

from distutils.version import StrictVersion


if StrictVersion(paramiko.__version__) < StrictVersion('2.4.0'):
    print('Please install paramiko>=2.4.0.')
    sys.exit(1)


PRIVATE_KEY = osp.expanduser('~/.ssh/id_rsa')
CONFIG_FILE = osp.expanduser('~/.ssh/config')


ssh_config = paramiko.SSHConfig()
if osp.exists(CONFIG_FILE):
    with open(CONFIG_FILE) as f:
        ssh_config.parse(f)


paramiko.util.log_to_file('/tmp/gpu_checker-%d.log' % os.getuid())


def ssh_and_run(args):
    host, user, commands = args

    user_config = ssh_config.lookup(host)
    host = user_config.get('hostname', host)
    user = user_config.get('username', user)
    port = user_config.get('port', 22)

    ssh = paramiko.SSHClient()
    ssh._policy = paramiko.WarningPolicy()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    sock = None
    if 'proxycommand' in user_config:
        sock = paramiko.ProxyCommand(user_config['proxycommand'])
    try:
        ssh.connect(host, port, user, key_filename=PRIVATE_KEY,
                    sock=sock, timeout=10, banner_timeout=10, auth_timeout=10)
    except paramiko.SSHException:
        return
    outputs = []
    for cmd in commands:
        stdin, stdout, stderr = ssh.exec_command(cmd)
        output = stdout.read()
        outputs.append(output)
    ssh.close()
    return outputs


def main():
    # sample:
    # https://gist.github.com/iory/10aafd62515ea1b08eb97c1d41c3b5f5
    filename = osp.expanduser('~/.gpu_checker.cfg')

    with open(filename, 'r') as f:
        server_list = yaml.load(f)

    user = server_list['username']
    hosts = server_list['hosts']

    cmds = [
        '$HOME/.local/bin/cuda-smi',
        '''ps auxwww | awk '{print $1}' | sed s/+\$/$(command whoami | cut -c 8-)/ | egrep "$(command ls /home)" | sort | uniq -c | sort -nr | xargs''',  # NOQA
        '''ps auxwww | egrep "$(command whoami | cut -c -7)" | grep "pts/" | grep -v "grep" | grep -v "sshd" | awk '{for (i=11; i<NF; i++){printf "%s%s", $i, OFS=" "} print $NF}' | grep -v "bash"''',  # NOQA
    ]

    with ProcessPoolExecutor(max_workers=4) as executor:
        params = [(host, user, cmds) for host in hosts]
        cmd_outputs = executor.map(ssh_and_run, params)

    rows = []
    for host, outputs in six.moves.zip(hosts, cmd_outputs):
        host_template = '{:<%d}' % max(len(h) for h in hosts)
        host = host_template.format(host)
        if outputs is None:
            rows.append('%s: %s' % (host, 'Cannot connect.'))
        else:
            for output in outputs:
                for line in output.splitlines():
                    rows.append('%s: %s' % (host, line))
        rows.append(None)
    max_width = max(len(row) for row in rows if row is not None)

    print('-' * max_width)
    for row in rows:
        if row is None:
            print('-' * max_width)
        else:
            print(row)


if __name__ == '__main__':
    main()
